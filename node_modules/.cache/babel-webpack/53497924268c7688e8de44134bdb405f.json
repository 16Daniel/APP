{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { Capacitor } from '@capacitor/core';\nimport { Directory, Filesystem } from '@capacitor/filesystem';\nimport { Storage } from '@capacitor/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nexport let PhotoService = /*#__PURE__*/(() => {\n  class PhotoService {\n    constructor(platform) {\n      this.platform = platform;\n      this.photos = [];\n      this.photoStorage = 'photos';\n\n      this.convertBlobToBase64 = blob => new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onerror = reject;\n\n        reader.onload = () => {\n          resolve(reader.result);\n        };\n\n        reader.readAsDataURL(blob);\n      });\n    }\n\n    loadSaved() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Recuperar datos de matrices de fotos en caché\n        const photoList = yield Storage.get({\n          key: this.photoStorage\n        });\n        this.photos = JSON.parse(photoList.value) || []; // Si se ejecuta en la web ...\n\n        if (!this.platform.is('hybrid')) {\n          // mostrar la foto leyendo en formato base64\n          for (const photo of this.photos) {\n            // Leer los datos de cada foto guardada del sistema de archivos\n            const readFile = yield Filesystem.readFile({\n              path: photo.filepath,\n              directory: Directory.Data\n            }); // Solo plataforma web: cargue la foto como datos base64\n            // photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n\n            photo.webviewPath = readFile.data;\n          }\n        }\n      });\n    }\n\n    addNewToGallery() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Toma una foto\n        const capturedPhoto = yield Camera.getPhoto({\n          resultType: CameraResultType.Uri,\n          source: CameraSource.Camera,\n          quality: 100 // highest quality (0 to 100)\n\n        });\n        const savedImageFile = yield this.savePicture(capturedPhoto); // Add new photo to Photos array\n\n        this.photos.unshift(savedImageFile); // Almacene en caché todos los datos de las fotos para recuperarlos en el futuro\n\n        Storage.set({\n          key: this.photoStorage,\n          value: JSON.stringify(this.photos)\n        });\n      });\n    } // Save picture to file on device\n\n\n    savePicture(cameraPhoto) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Convierta la foto al formato base64, requerido por la API del sistema de archivos para guardar\n        const base64Data = yield this.readAsBase64(cameraPhoto); // Write the file to the data directory\n\n        const fileName = new Date().getTime() + '.jpeg';\n        const savedFile = yield Filesystem.writeFile({\n          path: fileName,\n          data: base64Data,\n          directory: Directory.Data\n        });\n\n        if (this.platform.is('hybrid')) {\n          // Display the new image by rewriting the 'file://' path to HTTP\n          return {\n            filepath: savedFile.uri,\n            webviewPath: Capacitor.convertFileSrc(savedFile.uri)\n          };\n        } else {\n          // Use webPath to display the new image instead of base64 since it's\n          // already loaded into memory\n          return {\n            filepath: fileName,\n            webviewPath: cameraPhoto.webPath\n          };\n        }\n      });\n    } //Lee la foto de la cámara en formato base64 según la plataforma en la que se ejecuta la aplicación\n\n\n    readAsBase64(cameraPhoto) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // \"hybrid\" will detect Cordova or Capacitor\n        if (this.platform.is('hybrid')) {\n          // Read the file into base64 format\n          const file = yield Filesystem.readFile({\n            path: cameraPhoto.path\n          });\n          return file.data;\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const response = yield fetch(cameraPhoto.webPath);\n          const blob = yield response.blob();\n          return yield this.convertBlobToBase64(blob);\n        }\n      });\n    } // Elimine la imagen eliminándola de los datos de referencia y del sistema de archivos\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n    deletePicture(photo, position) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Remove this photo from the Photos reference data array\n        this.photos.splice(position, 1); // Update photos array cache by overwriting the existing photo array\n\n        Storage.set({\n          key: this.photoStorage,\n          value: JSON.stringify(this.photos)\n        }); // eliminar archivo de foto del sistema de archivos\n\n        const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\n        yield Filesystem.deleteFile({\n          path: filename,\n          directory: Directory.Data\n        });\n      });\n    } // eslint-disable-next-line @typescript-eslint/member-ordering\n\n\n    deleteAllPhoto(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.photos = [];\n        Storage.set({\n          key: this.photoStorage,\n          value: JSON.stringify(this.photos)\n        }); // eliminar archivo de foto del sistema de archivos\n\n        yield data.photoValidationGas.forEach(element => {\n          const filename = element.filepath.substr(element.filepath.lastIndexOf('/') + 1);\n          Filesystem.deleteFile({\n            path: filename,\n            directory: Directory.Data\n          });\n        });\n      });\n    }\n\n  }\n\n  PhotoService.ɵfac = function PhotoService_Factory(t) {\n    return new (t || PhotoService)(i0.ɵɵinject(i1.Platform));\n  };\n\n  PhotoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PhotoService,\n    factory: PhotoService.ɵfac,\n    providedIn: 'root'\n  });\n  return PhotoService;\n})();","map":null,"metadata":{},"sourceType":"module"}