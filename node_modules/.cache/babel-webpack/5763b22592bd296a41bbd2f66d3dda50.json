{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"src/app/core/services/service-general/service-general.service\";\nimport * as i3 from \"src/app/pages/dialog-general/loader/loader.component\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\n\nfunction DialogAddAlbaranesComponent_h4_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\", 9);\n    i0.ɵɵtext(1, \" REGISTRAR UN PROBLEMA \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DialogAddAlbaranesComponent_h4_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\", 9);\n    i0.ɵɵelementStart(1, \"b\");\n    i0.ɵɵtext(2, \" ACTUALIZAR EL PROBLEMA \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DialogAddAlbaranesComponent_ion_col_20_ion_label_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-label\", 21);\n    i0.ɵɵtext(1, \"Campo requerido\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DialogAddAlbaranesComponent_ion_col_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-col\", 18);\n    i0.ɵɵelementStart(1, \"ion-label\");\n    i0.ɵɵtext(2, \"Hora a la que lleg\\u00F3\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ion-card\", 19);\n    i0.ɵɵelementStart(4, \"ion-datetime\", 20);\n    i0.ɵɵlistener(\"focus\", function DialogAddAlbaranesComponent_ion_col_20_Template_ion_datetime_focus_4_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.activeTime = false;\n    })(\"ngModelChange\", function DialogAddAlbaranesComponent_ion_col_20_Template_ion_datetime_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.data.albaranTime = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, DialogAddAlbaranesComponent_ion_col_20_ion_label_5_Template, 2, 0, \"ion-label\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", ctx_r2.today)(\"ngModel\", ctx_r2.data.albaranTime);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.activeTime);\n  }\n}\n\nfunction DialogAddAlbaranesComponent_ion_label_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-label\", 21);\n    i0.ɵɵtext(1, \"Campo requerido\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let DialogAddAlbaranesComponent = /*#__PURE__*/(() => {\n  class DialogAddAlbaranesComponent {\n    constructor(modalController, navParams, service, load) {\n      this.modalController = modalController;\n      this.navParams = navParams;\n      this.service = service;\n      this.load = load;\n      this.disabled = false;\n      this.data = [];\n      this.today = new Date();\n      this.dataStatus = []; // ******variables de validacion ********\n\n      this.activeTime = false;\n      this.activeComment = false;\n    }\n\n    ionViewWillEnter() {\n      this.user = JSON.parse(localStorage.getItem('userData'));\n      console.log('user', this.user);\n      console.log('data que recibe', this.navParams.data);\n      this.objAlbaran = this.navParams.data.objAlbaran;\n      this.idStatus = this.navParams.data.idStatus;\n\n      if (this.objAlbaran.id !== 0) {\n        this.getAlbaran();\n      }\n    }\n\n    ngOnInit() {}\n\n    getAlbaran() {\n      this.service.serviceGeneralGet('Albaran/By-Id/' + this.objAlbaran.id).subscribe(resp => {\n        if (resp.success) {\n          this.data = resp.result;\n          console.log('get albaran', this.data.result);\n        }\n      });\n    }\n\n    dismiss() {\n      this.modalController.dismiss({\n        dismissed: true\n      });\n    }\n\n    validateSave() {\n      if (this.idStatus !== 3) {\n        if (this.data.albaranTime === '' || this.data.albaranTime === undefined || this.data.albaranTime === null) {\n          this.activeTime = true;\n        } else {\n          this.activeTime = false;\n        }\n      }\n\n      if (this.data.albaranTime === '' || this.data.albaranTime === undefined || this.data.albaranTime === null) {\n        this.activeTime = true;\n      } else {\n        this.activeTime = false;\n      }\n\n      if (this.data.albaranDescription === '' || this.data.albaranDescription === undefined || this.data.albaranDescription === null) {\n        this.activeComment = true;\n      } else {\n        this.activeComment = false;\n      }\n\n      if (this.idStatus !== 3) {\n        if (this.data.albaranTime === '' || this.data.albaranTime === undefined || this.data.albaranDescription === '' || this.data.albaranDescription === undefined) {\n          return;\n        } else {\n          this.save();\n        }\n      } else {\n        if (this.data.albaranDescription === '' || this.data.albaranDescription === undefined) {\n          return;\n        } else {\n          this.save();\n        }\n      }\n    }\n\n    getFormatTimeStamp() {\n      if (this.idStatus === 3) {\n        // si el estatus es no llego se asigna la hora y tiempo actual\n        this.data.albaranTime = this.today;\n      }\n\n      this.data.albaranTime = new Date(this.data.albaranTime);\n      console.log('time', this.data.albaranTime);\n      this.datetime = '' + this.data.albaranTime.getHours() + ':' + this.data.albaranTime.getMinutes() + ':' + this.data.albaranTime.getSeconds() + '.' + this.data.albaranTime.getMilliseconds();\n      console.log('timestamp', this.datetime);\n    }\n\n    save() {\n      if (this.objAlbaran.id === 0) {\n        this.addData();\n      } else {\n        this.updateData();\n      }\n    }\n\n    addData() {\n      this.getFormatTimeStamp(); // albaran el modelo no es correcto aun falta por definir\n\n      const obj = {\n        id: 0,\n        branchId: this.user.branchId,\n        albaranDate: this.objAlbaran.albaranDate,\n        albaranTime: this.objAlbaran.timeArrive,\n        albaranDescription: this.objAlbaran.descripcion,\n        numSerie: this.objAlbaran.numSerie,\n        numAlbaran: this.objAlbaran.numAlbaran,\n        n: this.objAlbaran.n,\n        statusId: this.idStatus,\n        timeArrive: this.datetime,\n        comment: this.data.albaranDescription,\n        createdBy: this.user.id,\n        createdDate: this.today,\n        updatedBy: this.user.id,\n        updatedDate: this.today\n      };\n      console.log('obj', obj);\n      this.service.serviceGeneralPostWithUrl('Albaran', obj).subscribe(resp => {\n        if (resp.success) {\n          this.load.presentLoading('Guardando..');\n          console.log('data', resp);\n          this.modalController.dismiss({\n            dismissed: true\n          });\n        }\n      });\n    }\n\n    updateData() {\n      // if (this.data.timeArrive.length > 8) {\n      //   this.getFormatTimeStamp();\n      // }\n      const obj = {\n        id: this.data.id,\n        albaranDate: this.objAlbaran.albaranDate,\n        albaranTime: this.objAlbaran.albaranTime,\n        albaranDescription: this.objAlbaran.descripcion,\n        numSerie: this.objAlbaran.numSerie,\n        numAlbaran: this.objAlbaran.numAlbaran,\n        n: this.objAlbaran.n,\n        statusId: this.idStatus,\n        timeArrive: this.data.timeArrive,\n        comment: this.data.albaranDescription,\n        createdBy: this.data.createdBy,\n        createdDate: this.data.createdDate,\n        updatedBy: this.user.id,\n        updatedDate: this.today\n      };\n      console.log('obj', obj);\n      this.service.serviceGeneralPut('Albaran', obj).subscribe(resp => {\n        if (resp.success) {\n          this.load.presentLoading('Actualizando Albaran..');\n          console.log('data', resp);\n          this.modalController.dismiss({\n            dismissed: true\n          });\n        }\n      });\n    }\n\n  }\n\n  DialogAddAlbaranesComponent.ɵfac = function DialogAddAlbaranesComponent_Factory(t) {\n    return new (t || DialogAddAlbaranesComponent)(i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i1.NavParams), i0.ɵɵdirectiveInject(i2.ServiceGeneralService), i0.ɵɵdirectiveInject(i3.LoaderComponent));\n  };\n\n  DialogAddAlbaranesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DialogAddAlbaranesComponent,\n    selectors: [[\"app-dialog-add-albaranes\"]],\n    inputs: {\n      objAlbaran: \"objAlbaran\",\n      idStatus: \"idStatus\"\n    },\n    decls: 33,\n    vars: 6,\n    consts: [[1, \"ion-no-border\", \"ion-padding\"], [\"size\", \"12\"], [1, \"close\", \"align-text-end\"], [\"slot\", \"icon-only\", \"name\", \"close-outline\", \"color\", \"danger\", 3, \"click\"], [\"size\", \"12\", 1, \"ion-align-self-center\"], [\"class\", \"subtitle-negro\", 4, \"ngIf\"], [\"size\", \"1\", 1, \"ion-align-self-center\"], [\"src\", \"./assets/icon/producto.png\", \"alt\", \"\"], [\"size\", \"11\", 1, \"ion-align-self-center\"], [1, \"subtitle-negro\"], [\"fullscreen\", \"false\", 1, \"ion-padding\"], [\"size\", \"6\", 4, \"ngIf\"], [\"required\", \"\", \"rows\", \"6\", \"cols\", \"20\", 3, \"ngModel\", \"focus\", \"ngModelChange\"], [\"style\", \"color: #ad182d; font-size: 12px\", 4, \"ngIf\"], [\"no-border\", \"\"], [\"size\", \"12\", 1, \"footer\"], [\"size\", \"3\", \"offset\", \"8\"], [\"shape\", \"round\", \"color\", \"danger\", \"expand\", \"full\", 3, \"click\"], [\"size\", \"6\"], [1, \"ion-align-self-center\"], [\"required\", \"\", \"type\", \"time\", \"displayFormat\", \"HH:mm a\", 3, \"value\", \"ngModel\", \"focus\", \"ngModelChange\"], [2, \"color\", \"#ad182d\", \"font-size\", \"12px\"]],\n    template: function DialogAddAlbaranesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-app\");\n        i0.ɵɵelementStart(1, \"ion-header\", 0);\n        i0.ɵɵelementStart(2, \"ion-row\", 1);\n        i0.ɵɵelementStart(3, \"ion-col\", 1);\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵelementStart(5, \"ion-icon\", 3);\n        i0.ɵɵlistener(\"click\", function DialogAddAlbaranesComponent_Template_ion_icon_click_5_listener() {\n          return ctx.modalController.dismiss();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-col\", 4);\n        i0.ɵɵelementStart(7, \"div\");\n        i0.ɵɵtemplate(8, DialogAddAlbaranesComponent_h4_8_Template, 2, 0, \"h4\", 5);\n        i0.ɵɵtemplate(9, DialogAddAlbaranesComponent_h4_9_Template, 3, 0, \"h4\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"ion-col\", 6);\n        i0.ɵɵelement(11, \"img\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"ion-col\", 8);\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵelementStart(14, \"h4\", 9);\n        i0.ɵɵelementStart(15, \"h5\");\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"ion-content\", 10);\n        i0.ɵɵelementStart(18, \"ion-grid\");\n        i0.ɵɵelementStart(19, \"ion-row\");\n        i0.ɵɵtemplate(20, DialogAddAlbaranesComponent_ion_col_20_Template, 6, 3, \"ion-col\", 11);\n        i0.ɵɵelementStart(21, \"ion-col\", 1);\n        i0.ɵɵelementStart(22, \"ion-label\");\n        i0.ɵɵtext(23, \"Comentario\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"ion-card\");\n        i0.ɵɵelementStart(25, \"ion-textarea\", 12);\n        i0.ɵɵlistener(\"focus\", function DialogAddAlbaranesComponent_Template_ion_textarea_focus_25_listener() {\n          return ctx.activeComment = false;\n        })(\"ngModelChange\", function DialogAddAlbaranesComponent_Template_ion_textarea_ngModelChange_25_listener($event) {\n          return ctx.data.albaranDescription = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, DialogAddAlbaranesComponent_ion_label_26_Template, 2, 0, \"ion-label\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"ion-footer\", 14);\n        i0.ɵɵelementStart(28, \"ion-grid\");\n        i0.ɵɵelementStart(29, \"ion-row\", 15);\n        i0.ɵɵelementStart(30, \"ion-col\", 16);\n        i0.ɵɵelementStart(31, \"ion-button\", 17);\n        i0.ɵɵlistener(\"click\", function DialogAddAlbaranesComponent_Template_ion_button_click_31_listener() {\n          return ctx.validateSave();\n        });\n        i0.ɵɵtext(32, \" GUARDAR \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.objAlbaran.id === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.objAlbaran.id !== 0);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(ctx.objAlbaran.nombreComercial);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.idStatus !== 3);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.data.albaranDescription);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.activeComment);\n      }\n    },\n    directives: [i1.IonApp, i1.IonHeader, i1.IonRow, i1.IonCol, i1.IonIcon, i4.NgIf, i1.IonContent, i1.IonGrid, i1.IonLabel, i1.IonCard, i1.IonTextarea, i1.TextValueAccessor, i5.RequiredValidator, i5.NgControlStatus, i5.NgModel, i1.IonFooter, i1.IonButton, i1.IonDatetime, i1.SelectValueAccessor],\n    styles: [\".align-text-end[_ngcontent-%COMP%]{text-align:end}.subtitle-negro[_ngcontent-%COMP%]{color:#000;font-weight:700;font-size:large}\"]\n  });\n  return DialogAddAlbaranesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}