{"ast":null,"code":"import { WebPlugin, CapacitorException } from '@capacitor/core';\nimport { CameraSource, CameraDirection } from './definitions';\nexport class CameraWeb extends WebPlugin {\n  async getPhoto(options) {\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise(async (resolve, reject) => {\n      if (options.webUseInput || options.source === CameraSource.Photos) {\n        this.fileInputExperience(options, resolve);\n      } else if (options.source === CameraSource.Prompt) {\n        let actionSheet = document.querySelector('pwa-action-sheet');\n\n        if (!actionSheet) {\n          actionSheet = document.createElement('pwa-action-sheet');\n          document.body.appendChild(actionSheet);\n        }\n\n        actionSheet.header = options.promptLabelHeader || 'Photo';\n        actionSheet.cancelable = false;\n        actionSheet.options = [{\n          title: options.promptLabelPhoto || 'From Photos'\n        }, {\n          title: options.promptLabelPicture || 'Take Picture'\n        }];\n        actionSheet.addEventListener('onSelection', async e => {\n          const selection = e.detail;\n\n          if (selection === 0) {\n            this.fileInputExperience(options, resolve);\n          } else {\n            this.cameraExperience(options, resolve, reject);\n          }\n        });\n      } else {\n        this.cameraExperience(options, resolve, reject);\n      }\n    });\n  }\n\n  async cameraExperience(options, resolve, reject) {\n    if (customElements.get('pwa-camera-modal')) {\n      const cameraModal = document.createElement('pwa-camera-modal');\n      document.body.appendChild(cameraModal);\n\n      try {\n        await cameraModal.componentOnReady();\n        cameraModal.addEventListener('onPhoto', async e => {\n          const photo = e.detail;\n\n          if (photo === null) {\n            reject(new CapacitorException('User cancelled photos app'));\n          } else if (photo instanceof Error) {\n            reject(photo);\n          } else {\n            resolve(await this._getCameraPhoto(photo, options));\n          }\n\n          cameraModal.dismiss();\n          document.body.removeChild(cameraModal);\n        });\n        cameraModal.present();\n      } catch (e) {\n        this.fileInputExperience(options, resolve);\n      }\n    } else {\n      console.error(`Unable to load PWA Element 'pwa-camera-modal'. See the docs: https://capacitorjs.com/docs/pwa-elements.`);\n      this.fileInputExperience(options, resolve);\n    }\n  }\n\n  fileInputExperience(options, resolve) {\n    let input = document.querySelector('#_capacitor-camera-input');\n\n    const cleanup = () => {\n      var _a;\n\n      (_a = input.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(input);\n    };\n\n    if (!input) {\n      input = document.createElement('input');\n      input.id = '_capacitor-camera-input';\n      input.type = 'file';\n      input.hidden = true;\n      document.body.appendChild(input);\n      input.addEventListener('change', _e => {\n        const file = input.files[0];\n        let format = 'jpeg';\n\n        if (file.type === 'image/png') {\n          format = 'png';\n        } else if (file.type === 'image/gif') {\n          format = 'gif';\n        }\n\n        if (options.resultType === 'dataUrl' || options.resultType === 'base64') {\n          const reader = new FileReader();\n          reader.addEventListener('load', () => {\n            if (options.resultType === 'dataUrl') {\n              resolve({\n                dataUrl: reader.result,\n                format\n              });\n            } else if (options.resultType === 'base64') {\n              const b64 = reader.result.split(',')[1];\n              resolve({\n                base64String: b64,\n                format\n              });\n            }\n\n            cleanup();\n          });\n          reader.readAsDataURL(file);\n        } else {\n          resolve({\n            webPath: URL.createObjectURL(file),\n            format: format\n          });\n          cleanup();\n        }\n      });\n    }\n\n    input.accept = 'image/*';\n    input.capture = true;\n\n    if (options.source === CameraSource.Photos || options.source === CameraSource.Prompt) {\n      input.removeAttribute('capture');\n    } else if (options.direction === CameraDirection.Front) {\n      input.capture = 'user';\n    } else if (options.direction === CameraDirection.Rear) {\n      input.capture = 'environment';\n    }\n\n    input.click();\n  }\n\n  _getCameraPhoto(photo, options) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      const format = photo.type.split('/')[1];\n\n      if (options.resultType === 'uri') {\n        resolve({\n          webPath: URL.createObjectURL(photo),\n          format: format,\n          saved: false\n        });\n      } else {\n        reader.readAsDataURL(photo);\n\n        reader.onloadend = () => {\n          const r = reader.result;\n\n          if (options.resultType === 'dataUrl') {\n            resolve({\n              dataUrl: r,\n              format: format,\n              saved: false\n            });\n          } else {\n            resolve({\n              base64String: r.split(',')[1],\n              format: format,\n              saved: false\n            });\n          }\n        };\n\n        reader.onerror = e => {\n          reject(e);\n        };\n      }\n    });\n  }\n\n  async checkPermissions() {\n    if (typeof navigator === 'undefined' || !navigator.permissions) {\n      throw this.unavailable('Permissions API not available in this browser');\n    }\n\n    try {\n      // https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query\n      // the specific permissions that are supported varies among browsers that implement the\n      // permissions API, so we need a try/catch in case 'camera' is invalid\n      const permission = await window.navigator.permissions.query({\n        name: 'camera'\n      });\n      return {\n        camera: permission.state,\n        photos: 'granted'\n      };\n    } catch (_a) {\n      throw this.unavailable('Camera permissions are not available in this browser');\n    }\n  }\n\n  async requestPermissions() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n}\nconst Camera = new CameraWeb();\nexport { Camera }; //# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module"}